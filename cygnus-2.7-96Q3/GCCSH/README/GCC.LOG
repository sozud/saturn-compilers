
File: SOA GCC Change Log
  by: Toshiyasu Morita
--------------------------

Quick note on the change log format:

 o Note1 (Note2) (Note3)

   Note1: This is a quick description of the bug.
   Note2: This is the Cygnus PR (problem report) tracking number.
   Note3: This is a list of files which were modified to fix the problem.

   For example:

   o  Compiler crashes; bad parms to find_free_reg()
      (gcc/9036) (gcc/regmove.c)

   The Cygnus PR number is "gcc/9036", the file modified to
   fix this problem was "regmove.c" in the gcc subdirectory. 
   Some change log entries may not include a Cygnus PR if they
   were fixed internally at SOA.

--------------------------
Known bugs in this version
--------------------------

Performance bugs:

o GCC doesn't align loads on longword boundaries.

Functional bugs:

o SRCONV generates incorrect SYSROF files.

  This won't ever really be fixed; evidently SYSROF requires information
  which COFF files don't contain, and the Hitachi SYSROF loaders
  (linker & debugger) will not output error messages when an incorrect SYSROF
  file is loaded - they just crash, so it's nearly impossible to fix.

o -O3 may cause the compiler to crash.

  The option "-finline-functions" which is enabled by -O3 may cause the 
  compiler to crash on some files. If this occurs, remove -finline-functions
  from your compiler invocation and/or change -O3 to -O2.

-----------
Change log:
-----------

cygnus-2.7-96q3 SOA-960904 changes:

 o Fixed gcc crashes with -fprofile-arcs.
   (gcc/10282) (gcc/profile.c, gcc/config/sh/sh.md)

 o Fixed gas doesn't pad alignment with NOPs in sections other than .text.
   gas now pads with NOP in all sections but .data and .bss.
   (binutils/10312) (gas/config/tc-sh.c)

 o Fixed gcc generates awkward register moves.
   (gcc/10288) (gcc/optabs.c)

 o Fixed gcc generates trap instruction for profiling after function call.
   gcc now generates the profile trap before the function prologue
   which means you must save/restore r4-r15 in the profile trap handler.
   (gcc/10302) (gcc/config/sh/sh.h)

 o Fixed gcc uses movt inefficiently for moving constant 1 into register.
   (gcc/10267) (gcc/config/sh/sh.md)

 o Changed build file to prepend stub.exe onto MS-DOS executables.
   (Fixes "stack error" crashes)
    
cygnus-2.7-96q3 SOA-960806 changes:

 o Migrated to Cygnus 96q3 release 

 o Fixed problem in stock 96q3 release:

    o Unrecognized insn produced when "#pragma interrupt" used
      (gcc/10230) (gcc/config/sh/sh.c)

 o Reapplied missing patches in 96q3 release:

    o Compiler generates functions which allocate stack space unnecessarily.
      (gcc/9960) (gcc/sh.h)

    o Faster SH-specific memcpy() and memset() included in standard C library.
      (newlib/libc/machine/sh/memcpy.S, newlib/libc/machine/sh/memset.S,
       newlib/libc/machine/Makefile.in)

    o GCC misses relaxation opportunity.
      (gcc/10079) (gcc/config/sh/sh.c)

  o New patches:

    o Insn generated which does not satisfy constraints.
      (gcc/10248) (gcc/config/sh/sh.c)

cygnus-2.7-96q2 SOA-960719 changes:

 o Migrated to Cygnus 96q2 release

 o Fixed problems in stock 96q2 release:

    o Preprocesor ignores #includes after first #include directive.
      (gcc/9883) (gcc/cccp.c)

    o Compiler generates functions which allocate stack space unnecessarily.
      (gcc/9960) (gcc/sh.h)

    o GCC places uninitialized statics in .data section at -O2
      (gcc/10014) (gcc/toplev.c)

 o Reapplied missing patches:

    o Faster SH-specific memcpy() and memset() included in standard C library.
      (newlib/libc/machine/sh/memcpy.S, newlib/libc/machine/sh/memset.S,
       newlib/libc/machine/Makefile.in)

 o Performance patches:

    o GCC misses relaxation opportunity.
      (gcc/10079) (gcc/config/sh/sh.c)

cygnus-2.7-96q1 SOA-960412 changes:

 o Fixed GAS has incorrect limits for range of pc-relative instruction 
   (gas/9450) (gas/config/tc-sh.c)

cygnus-2.7-96q1 SOA-960328 changes:

 o Fixed setjmp()/longjmp() again. (newlib/8612)
   (newlib/libc/machine/sh/Makefile.in, newlib/libc/machine/sh/asm.h, 
    newlib/libc/machine/sh/setjmp.S, newlib/libc/include/machine/setjmp.h)

   Note: Only necessary registers, i.e. r8-r15, are saved by setjmp()/longjmp()
         now. Previously r0-r15 were saved, but since r0-r7 are assumed
         callee-destroyed it doesn't make sense to save them.

 o Fixed GCC munges structure initialization (gcc/9290) (gcc/c-typeck.c)
 
cygnus-2.7-96q1 SOA-960314 changes:

 o Migrated to Cygnus 96q1 release.

 o Fixed problems in stock 96q1 release:

   o Compiler crashes; bad parms to find_free_reg()
     (gcc/9036) (gcc/regmove.c)

   o Linker complains about relocations generated in .bss section when relaxing
     (ld/9044) (gas/config/tc-sh.c)

   o Linker complains about R_SH_USES pointing to 0x9 when relaxing
     (ld/9043) (bfd/coff-sh.c)

   o GAS can't find fixup when relaxing; also change "pcrel too far"
     from warning to error (gas/9072) (gas/config/tc-sh.c)

   o GCC incorrectly optimizes jsr to bsr when relaxing
     (gcc/9073) (gcc/config/sh/sh.c)

 o Applied pending patches from 95q4:

   o gcc/8876: GCC generates literals too far from reference 
   o gcc/8798: GCC generates switch tables in wrong section
   o  ld/8816: ld has problems with relocatable link
   o gcc/8703: GCC optimizes even at -O0
   o gcc/8695: Fixed unnecessary load/stores generated before inline asm
   o gcc/8546: Overzealous induction variable optimization
   o gcc/8194: Fixed gcc doesn't generate shal, shad for SH3 
   o gcc/8196: Fixed gcc generates awkward code for subtracting from constant

 o New patches:

   o GCC incorrectly multiplies floating point nums at -ml 
     (gcc/9048 gcc/9055) (gcc/config/sh.md)

   o Fixed minor bug in patch for gcc/8546.
     (gcc/8546) (gcc/loop.c)

   o Need alignment which word fills (.text now fills with nop,
     also new pseudo-ops .balignw and .balignl) (gas/8974)
     (gas/read.c, gas/config/tc-sh.c, gas/config/tc-sh.h, config/obj-coff.c)

   o Compiler crashes under Win3.1/Win95.
     The default stack size of the compiler has been changed from 256k
     to 2 megabytes, which solves this problem (gcc tends to call
     alloca() to allocate very large amounts of memory)

   o GCC pads structures incorrectly when gcc extension is used.
     (gcc/9109) (gcc/c-typeck.c)

   o Faster SH-specific memcpy() and memset() included in standard C library.
     (newlib/libc/machine/sh/memcpy.S, newlib/libc/machine/sh/memset.S,
      newlib/libc/machine/Makefile.in)

cygnus-2.7-95q4 SOA-960130 changes:

 o Fixed another problem with literals generated too far from reference.
   (gcc/8876) (gcc/config/sh/sh.c)

 o memcpy() and memset() in the standard C library are very slow,
   so I've written faster versions called qmemcpy() and qmemset().
   Source is in this directory. This code will become a part of
   the standard C library soon, hopefully.

cygnus-2.7-95q4 SOA-960119 changes:

 o Fixed when function is forced to section other than .text by
   using the "__attribute__" keyword the switch table for the
   function still goes into the .text section.
   (gcc/8798) (gcc/config/sh/sh.h)

 o Fixed problem with linker script used when -r is specified.
   "ld -r" should create files without global constructors/destructors.
   The bug prevented overlays from linking properly.
   (See the file "overlay.txt" for more info on overlays.)
   (ld/8816) (ld/scripttempl/sh.sc)

cygnus-2.7-95q4 SOA-960104 changes:

 o Fixed gcc optimizes even at -O0. This changes makes it easier to 
   debug code, and hopefully shouldn't cause any problems.
   (gcc/8703) (gcc/config/sh/sh.c gcc/config/sh/sh.h)

 o Fixed unnecessary load/stores generated before/after inline asm
   (gcc/8695) (gcc/stmt.c)

 o Fixed overzealous induction loop optimization (gcc/8546)
   (gcc/config/sh/sh.h gcc/loop.c)
  
 o Fixed gcc doesn't generate shal, shad for SH3 (gcc/8194)
   (gcc/config/sh/sh.md)

 o Fixed gcc generates awkward code for subtracting from constant (gcc/8196)
   (gcc/config/sh/sh.md)

cygnus-2.7-95q4 SOA-951117 changes:

 o Migrated to Cygnus 95q4 release

   We've been told by Cygnus the 95q4 release has added many optimizations
   specifically for the SH processors and generates code which is
   7-10% smaller and faster than 95q3.

 o Applied pending patches:

   gcc:
     gcc/7856: Faster 64-bit multiply & generate SH2 specific libs
     gcc/8005: Problem with gcc generating incorrect little-endian SH code
     gcc/8212: Problem with out-of-range literal loads

   newlib:
     newlib/7524: Changed function profiler trap from trap #5 to trapa #33

 o Fixed gcc fails to emit valid slot instruction (gcc/8432)
   (gcc/config/sh/sh.md)

 o Installed minor patch for delay slot splitting (gcc/final.c)

cygnus-2.7-95q3 SOA-951018 changes:

 o Changed function profiler trap from trapa #5 to trapa #33.
   (newlib/7524) (gcc/config/sh/sh.h)

 o Fixed problem with gcc generating bad little-endian SH code.
   (gcc/8005) (gcc/config/sh/sh.md, newlib/libc/machine/sh/makefile.in,
    newlib/libc/machine/sh/setjmp.S, newlib/libc/sh/Makefile.in, 
    newlib/libc/include/machine/ieeeefp.h)

 o Fixed problem with out-of-range literal loads.
   (gcc/8212) (gcc/config/sh/sh.c)

cygnus-2.7-95q3-SOA-950906 changes:

 GCC:

 o Fixed minor build problem. (gcc/version.c)

 o Added insns for inline 64-bit multiply and divide, also generate
   SH2-specific standard C libraries (gcc/7856)
   (gcc/config/sh/sh.md, gcc/config/sh/t-sh, newlib/config/Makefile.in)

   Note: If you're using the SH2 (you probably are) then you want to link with
         the libraries in LIB/SH2 rather than LIB - the LIB/SH2 libraries are
         optimized for SH2.

 NEWLIB:

 o Changed syscall interface from trapa #3 to trapa #34 (newlib/7524)
   (newlib/libc/sys/sh/syscalls.c newlib/libc/sys/sh/trap.S
    sim/sh/gencode.c sim/sh/interp.c)

cygnus-95q3-SOA-950822 changes:

 GCC:

 o Migrated to Cygnus 95q3 release.

   Note: Code generation is improved - emitted code should be
         a few percent smaller than previous release.

 o Fixed failures in c-torture-1.34: 

   Fixed failure for execute/950512-1.c   (gcc/7489) (gcc/fold-const.c)
   Fixed failure for execute/divconst-2.c (gcc/7490) (gcc/expmed.c)
   Fixed failure for execute/va-arg-3.c   (gcc/7538) (gcc/config/sh/sh.c)
   Fixed failure for execute/complex-4.c  (gcc/7592) (gcc/expr.c)

 o Applied pending patches:

    gcc:
      gcc/7465 (gcc/cse.c)
      gcc/7442 (gcc/config/sh/sh.h)
      gcc/7424 (gcc/config/sh/sh.c, gcc/config/sh/sh.md)
      gcc/6907 (gcc/config/sh/lib1funcs.asm)

    gas:
      gas/6619 (gas/config/tc-sh.c)
      gas/7006 (gas/config/obj-coff.c)
      gas/6850 (sim/sh/gencode.c, opcodes/sh-opc.h)

 o Fixed unaligned long in trap.c generates address exception (newlib/7532)
   (newlib/libc/sys/sh/trap.S)

 o Fixed gasp assembles .sdata "v1.0000" incorrectly (gasp/7583) (gas/gasp.c)

 o Fixed gcc saves too many registers on SH3 for lowest level interrupt 
   (gcc/7637) (gcc/config/sh/sh.c)

 o Fixed gcc destroys stack frame too soon and uses memory below r15
   for _uddivmoddi4 (gcc/7738) (gcc/config/sh/sh.c)

 o Fixed minor bug in patch for gcc/7424.
    
cygnus-2.6-95q1-SOA-950726 changes:

 GCC:

 o Previous comment in 950718 about stack frames is wrong.
   GCC will now ALWAYS generate a stack frame unless "-fomit-frame-pointer"
   is explicitly specified.

   This means, by default, gcc code runs slightly slower than before, but
   is always properly debuggable.

   To have the same behavior as previous versions, just specify
   "-fomit-frame-pointer".

 o Fixed gcc optimizing at -O2 generates incorrect code. (gcc/7465)

cygnus-2.6-95q1-SOA-950718 changes:

 GCC:

 o Fixed function doesn't promote short parameter arguments to int. (gcc/7537)

   Note: This change makes gcc more compatible with K&R (non-prototyped) code;
         however, you must now properly extend registerized parameters
         to a full 32-bits when calling C functions from assembly.
         See note in "GCC calling convention" for more info.

 o Fixed gcc does not occasionally generate valid stack frame. 
   This caused the SNASM debugger to assume the local variables
   were at incorrect addresses and therefore display incorrect values.
   (gcc/7442)

   Note: gcc will now always generate a valid stack frame (mov r15,r14)
         in the function prologue when debugging (-g) is specified.

         One nasty side effect of this change is gcc will now generate
         different code when debugging is specified because r14
         is no longer available as a general-purpose register,
         which can change the size of your code,
         which can change the address of your variables,
         which can change the behavior of your bug.

  o Fixed (partially) gcc generates "mov #k,r0; add r15,r0; mov.l @r0,rm"
    instead of "mov #k,r0; mov.l @(r0,rn),rm" (gcc/7424)

    Added a peephole optimizer sequence, which is not the best way to do
    this, since instruction scheduling tends to separate the instructions.
    However, the right way would involve rewriting large parts of gcc, so
    this approach was chosen.

  o Fixed mixed C/assembly listing doesn't line up with source. (gcc/7006)

cygnus-2.6-95q1-SOA-950616 changes:

  GCC:

  o Fixed function writes outside own stack frame (gcc/7168)

  binutils:

  o Fixed SYSDUMP dumps SYSROF files incorrectly under MS-DOS (binutils/7137)

cygnus-2.6-95q1-SOA-950606 changes:

  Tool suite:

  o Punted on moving to Cygnus 95q2 codebase. 95q2 has too many bugs.

  GCC:

  o Minor improvments to libgcc.a to reduce size by 100+ bytes and improve shift speed.

  o Added SETT insn to sh.md.

  GAS:

  o Fixed GAS calculates expressions in ".byte" statements incorrectly.
    (i.e. .byte L_foo-L_bar). (gcc/6545) 

  o Fixed GAS crashes on undefined symbols. (binutils/6732 & 6736)

  o Added support for BRAF and BSRF instructions. (gas/6850)

  SRCONV:

  o Fixed SRCONV converting SGL demo files incorrectly. (binutils/6725)
    New option added to SRCONV; if converting executable COFF files
    (all references resolved) use the "-n" switch to insure
    files will be converted properly.

cygnus-2.6-95q1-SOA-950406 changes:

  GCC:

  o Fixed GCC uses wrong base register to access locals (gcc/6670)
    Occured when function used all registers & function call req'd >4 parms.

  o Fixed GCC generates incorrect stack offset references for variables in
    nested blocks. (gcc/6665)

  o Fixed ___main was not compiled into libgcc.a.
    (The primary symptom was "can't find __main" link error message)
    Hopefully this is the last bug preventing C++ from working properly.

  o Converted shift-by-k and shift-by-n routines in libgcc.a to assembly.
    (___ashiftrt_r4_n, ___ashrsi3, ___ashlsi3, lshrsi3)

  o Fixed minor bug with GCC calculating AND costs incorrectly. (gcc/6598)

  GDB:

  o GDB under IRIX5.3 now runs under a nice graphical user interface.
    To use it, be sure your DISPLAY environment variable is set to something
    appropriate. (e.g. setenv DISPLAY :0)

  Hardcopy documentation:

  o New GNU tools documention (95q1) is now available from Sega.
 
cygnus-2.6-95q1-SOA-950317 changes:

  o Changed to 95q1 codebase, applied all missing patches

  GCC:

  o Fixed problem with r0 occasionally overwritten after call to ___sdivsi3,
    ___udivsi3, ___mulsi3 (___mulsi3 on sh1 only). (gcc/6455)

  o C++ is now enabled. If you're using straight C, and you'd like to
    avoid the 5k of overhead for C++ global constructors, insert a dummy
    function called "__main() {}" to prevent the C++ constructor code
    from being linked. For reference, __main() is defined in libgcc.a.
    (g++/6438)

cygnus-2.6.0-941014-SOA-950215 changes:

  GCC:

  o Structure packing is now the default; to turn it off use -mpadstruct (gcc/6331)
    (GCC now compiles SOJ libraries properly using defaults)

  o Fixed <limits.h>

  o Fixed info files

  o READ.ME file restructured; renamed GCC.FAQ

cygnus-2.6.0-941014-SOA-950208 changes:

  GCC:

  o Fixed vararg structure passing by value with -mpackstruct (gcc/6278)

  SRCONV:

  o SRCONV now generates debug information usable by E7000 ICE!
    "DA file\_func" now works in E7000 ICE.

cygnus-2.6.0-941014-SOA-950201 changes:

  RUN:

  o Fixed SH simulator simulates SUBC, NEGC, ADDC incorrectly (gcc/6200)
  o Fixed SH simulator lacks SUBV, MAC.W (gdb/6203)

  GCC:

  o Fixed GCC generates MUL.L #2 for multiply by two (gcc/6208)
  o Fixed GCC loads parameter into wrong register when passing structures
    (occasionally) (gcc/6197)
  o Fixed GCC generates incorrect stack cleanup code on function after function
    with infinite loop (gcc/6116)

  GAS:

  o Fixed GAS truncates GBR offsets to four bits (gas/6207)

  LD:

  o Fixed LD generates incorrect S-records (ld/6215)

  Libraries:

  o Fixed _ashlsi3 has no delay slot instruction for rts 
  o Turned on optimization - libraries are much smaller!

